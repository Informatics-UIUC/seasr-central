<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<comment>SEASR CENTRAL storage schema for MySQL</comment>

	<entry key="org.seasr.central.storage.db.driver">com.mysql.jdbc.Driver</entry>
	<entry key="org.seasr.central.storage.db.url"><![CDATA[jdbc:mysql://localhost/SC?useUnicode=yes&characterEncoding=utf8&autoReconnect=true]]></entry>
	<entry key="org.seasr.central.storage.db.user">sc</entry>
	<entry key="org.seasr.central.storage.db.password">sc</entry>
	<entry key="org.seasr.central.storage.db.db"></entry>
	<entry key="org.seasr.central.storage.db.loglevel">ALL</entry>
	<entry key="org.seasr.central.storage.repository.location">repository</entry>

	<entry key="org.seasr.central.storage.link">org.seasr.central.storage.db.SQLiteLink</entry>

	<entry key="org.seasr.central.storage.db.auth.schema">
		CREATE TABLE IF NOT EXISTS sc_role (uuid CHAR(36) NOT NULL PRIMARY KEY, role VARCHAR(30) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8;
		CREATE TABLE IF NOT EXISTS sc_user (uuid CHAR(36) NOT NULL PRIMARY KEY, screen_name VARCHAR(20) NOT NULL UNIQUE, password VARCHAR(80) NOT NULL, created_at DATETIME NOT NULL, profile TEXT, deleted BOOLEAN NOT NULL DEFAULT 0, INDEX USING HASH (screen_name), INDEX USING HASH (deleted)) ENGINE=InnoDB DEFAULT CHARSET=utf8;
		CREATE TABLE IF NOT EXISTS sc_role_user (user_uuid CHAR(36) NOT NULL, role_uuid CHAR(36) NOT NULL, FOREIGN KEY (user_uuid) REFERENCES sc_user(uuid), FOREIGN KEY (role_uuid) REFERENCES sc_role(uuid), INDEX USING HASH (user_uuid, role_uuid)) ENGINE=InnoDB DEFAULT CHARSET=utf8;

		INSERT IGNORE INTO sc_role (uuid, role) VALUES ("08b40562-138e-4ca9-86d7-561cfec1de0e", "user");
		INSERT IGNORE INTO sc_role (uuid, role) VALUES ("d7cb33b8-1225-498d-a463-5b78734f93f7", "admin");
		INSERT IGNORE INTO sc_user (uuid, screen_name, password, created_at) VALUES ("23e38ffa-fafc-4430-b88d-f04bd4d89104", "admin", "d033e22ae348aeb5660fc2140aec35850c4da997", NOW());
		INSERT IGNORE INTO sc_role_user (user_uuid, role_uuid) VALUES ("23e38ffa-fafc-4430-b88d-f04bd4d89104", "d7cb33b8-1225-498d-a463-5b78734f93f7");
	</entry>

	<entry key="org.seasr.central.storage.db.schema">
        CREATE TABLE IF NOT EXISTS sc_event_codes (evt_code INT NOT NULL PRIMARY KEY, description VARCHAR(255) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8;
        CREATE TABLE IF NOT EXISTS sc_events (source CHAR(1) NOT NULL, uuid CHAR(36) NOT NULL, evt_code INT NOT NULL, description TEXT, timestamp DATETIME NOT NULL, FOREIGN KEY (evt_code) REFERENCES sc_event_codes(evt_code)) ENGINE=InnoDB DEFAULT CHARSET=utf8;

        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (100, "USER_CREATED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (101, "USER_DELETED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (102, "USER_RENAMED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (103, "USER_PROFILE_UPDATED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (104, "USER_JOINED_GROUP");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (105, "USER_PARTED_GROUP");

        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (200, "GROUP_CREATED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (201, "GROUP_DELETED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (202, "GROUP_RENAMED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (203, "GROUP_JOINED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (204, "GROUP_PARTED");

        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (300, "COMPONENT_UPLOADED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (301, "COMPONENT_DELETED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (303, "COMPONENT_UPDATED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (304, "COMPONENT_SHARED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (305, "COMPONENT_UNSHARED");

        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (400, "FLOW_UPLOADED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (401, "FLOW_DELETED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (403, "FLOW_UPDATED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (404, "FLOW_SHARED");
        INSERT IGNORE INTO sc_event_codes (evt_code, description) VALUES (405, "FLOW_UNSHARED");

        CREATE TABLE IF NOT EXISTS sc_component (uuid CHAR(36) NOT NULL, version INT NOT NULL, upload_date DATETIME NOT NULL, deleted BOOLEAN NOT NULL DEFAULT 0, PRIMARY KEY (uuid, version)) ENGINE=InnoDB DEFAULT CHARSET=utf8;
        CREATE TABLE IF NOT EXISTS sc_component_id_map (orig_uri VARCHAR(255) NOT NULL, user_uuid CHAR(36) NOT NULL, comp_uuid CHAR(36) NOT NULL, PRIMARY KEY (orig_uri, user_uuid), FOREIGN KEY (user_uuid) REFERENCES sc_user(uuid), FOREIGN KEY (comp_uuid) REFERENCES sc_component(uuid)) ENGINE=InnoDB DEFAULT CHARSET=utf8;

        CREATE TABLE IF NOT EXISTS sc_flow (uuid CHAR(36) NOT NULL, version INT NOT NULL, upload_date DATETIME NOT NULL, deleted BOOLEAN NOT NULL DEFAULT 0, PRIMARY KEY (uuid, version)) ENGINE=InnoDB DEFAULT CHARSET=utf8;
        CREATE TABLE IF NOT EXISTS sc_flow_id_map (orig_uri VARCHAR(255) NOT NULL, user_uuid CHAR(36) NOT NULL, flow_uuid CHAR(36) NOT NULL, PRIMARY KEY (orig_uri, user_uuid), FOREIGN KEY (user_uuid) REFERENCES sc_user(uuid), FOREIGN KEY (flow_uuid) REFERENCES sc_flow(uuid)) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	</entry>

    <!-- USER -->
	<entry key="org.seasr.central.storage.db.query.user.count">
		SELECT COUNT(1) FROM sc_user WHERE deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.add">
		INSERT INTO sc_user (uuid, screen_name, password, created_at, profile) VALUES (?, ?, ?, NOW(), ?);
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.remove.uuid">
		UPDATE sc_user SET deleted = 1 WHERE uuid = ?;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.remove.screen_name">
		UPDATE sc_user SET deleted = 1 WHERE screen_name = ?;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.uuid">
		SELECT uuid FROM sc_user WHERE screen_name = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.screen_name">
		SELECT screen_name FROM sc_user WHERE uuid = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.profile.uuid">
		SELECT profile FROM sc_user WHERE uuid = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.profile.screen_name">
		SELECT profile FROM sc_user WHERE screen_name = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.createdat.uuid">
		SELECT DATETIME(created_at, 'localtime') FROM sc_user WHERE uuid = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.createdat.screen_name">
		SELECT DATETIME(created_at, 'localtime') FROM sc_user WHERE screen_name = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.valid.password.uuid">
		SELECT 1 FROM sc_user WHERE uuid = ? AND password = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.valid.password.screen_name">
		SELECT 1 FROM sc_user WHERE screen_name = ? AND password = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.update.profile.uuid">
		UPDATE sc_user SET profile = ? WHERE uuid = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.update.profile.screen_name">
		UPDATE sc_user SET profile = ? WHERE screen_name = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.update.password.uuid">
		UPDATE sc_user SET password = ? WHERE uuid = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.update.password.screen_name">
		UPDATE sc_user SET password = ? WHERE screen_name = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.db.list">
		SELECT uuid, screen_name, profile FROM sc_user WHERE deleted = 0 LIMIT ?, ?;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.deleted">
        SELECT deleted FROM sc_user WHERE uuid = ?;
	</entry>


    <!-- EVENTS -->
    <entry key="org.seasr.central.storage.db.query.event.add">
        INSERT INTO sc_events (source, uuid, evt_code, description, timestamp) VALUES (?, ?, ? ,?, NOW());
    </entry>

    <!-- COMPONENTS -->
    <entry key="org.seasr.central.storage.db.query.component.add">
        INSERT INTO sc_component (uuid, version, upload_date) VALUES (?, ?, NOW());
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.add.id">
        INSERT INTO sc_component_id_map (orig_uri, user_uuid, comp_uuid) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.get.id.origuri.user">
        SELECT comp_uuid FROM sc_component_id_map WHERE orig_uri = ? AND user_uuid = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.get.last.version.number">
        SELECT MAX(version) FROM sc_component WHERE uuid = ? FOR UPDATE;
    </entry>
    <!-- SELECT c.base_uri, m.deleted FROM sc_component c INNER JOIN sc_component_id_map m ON c.uuid = m.comp_uuid WHERE c.uuid = ? AND c.version = ?; -->
    <entry key="org.seasr.central.storage.db.query.component.get.state.uuid.version">
        SELECT deleted FROM sc_component WHERE uuid = ? AND version = ?;
    </entry>

    <!-- FLOWS -->
    <entry key="org.seasr.central.storage.db.query.flow.add">
        INSERT INTO sc_flow (uuid, version, upload_date) VALUES (?, ?, NOW());
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.add.id">
        INSERT IGNORE INTO sc_flow_id_map (orig_uri, user_uuid, flow_uuid) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.get.id.origuri.user">
        SELECT flow_uuid FROM sc_flow_id_map WHERE orig_uri = ? AND user_uuid = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.get.last.version.number">
        SELECT MAX(version) FROM sc_flow WHERE uuid = ? FOR UPDATE;
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.get.state.uuid.version">
        SELECT deleted FROM sc_flow WHERE uuid = ? AND version = ?;
    </entry>
</properties>