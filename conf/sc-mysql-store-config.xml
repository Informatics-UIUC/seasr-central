<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment>SEASR CENTRAL storage schema for MySQL</comment>

    <entry key="org.seasr.central.storage.db.driver">com.mysql.jdbc.Driver</entry>
    <entry key="org.seasr.central.storage.db.url">
        <![CDATA[jdbc:mysql://localhost/SC?useUnicode=yes&characterEncoding=utf8&autoReconnect=true]]>
    </entry>
    <entry key="org.seasr.central.storage.db.user">sc</entry>
    <entry key="org.seasr.central.storage.db.password">sc</entry>

    <entry key="org.seasr.central.storage.db.logfile">logs/mysql.log</entry>
    <entry key="org.seasr.central.storage.db.loglevel">ALL</entry>

    <entry key="org.seasr.central.storage.link">org.seasr.central.storage.db.SQLLink</entry>

    <entry key="org.seasr.central.storage.db.auth_schema">
        //
        // sc_permission
        //
        CREATE TABLE IF NOT EXISTS sc_permission (
            perm_id  SMALLINT UNSIGNED NOT NULL,
            name     VARCHAR(45) NOT NULL,

            PRIMARY KEY (perm_id),
            UNIQUE INDEX (name ASC)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_role
        //
        CREATE TABLE IF NOT EXISTS sc_role (
            role_id  SMALLINT UNSIGNED NOT NULL,
            name     VARCHAR(30) NOT NULL,

            PRIMARY KEY (role_id),
            UNIQUE INDEX (name ASC)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_user
        //
        CREATE TABLE IF NOT EXISTS sc_user (
            user_uuid    DECIMAL(39) NOT NULL,
            screen_name  VARCHAR(20) NOT NULL,
            password     VARCHAR(80) NOT NULL,
            created_at   DATETIME NOT NULL,
            profile      TEXT NULL,
            deleted      BOOLEAN NOT NULL DEFAULT FALSE,

            PRIMARY KEY (user_uuid),
            UNIQUE INDEX (screen_name ASC),
            INDEX (deleted) USING HASH
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_role_permission
        //
        CREATE TABLE IF NOT EXISTS sc_role_permission (
            role_id  SMALLINT UNSIGNED NOT NULL,
            perm_id  SMALLINT UNSIGNED NOT NULL,

            PRIMARY KEY (role_id, perm_id),
            INDEX (role_id) USING HASH,
            FOREIGN KEY (role_id) REFERENCES sc_role (role_id),
            INDEX (perm_id) USING HASH,
            FOREIGN KEY (perm_id) REFERENCES sc_permission (perm_id)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_user_role
        //
        CREATE TABLE IF NOT EXISTS sc_user_role (
            user_uuid  DECIMAL(39) NOT NULL,
            role_id    SMALLINT UNSIGNED NOT NULL,

            PRIMARY KEY (user_uuid, role_id),
            INDEX (user_uuid) USING HASH,
            FOREIGN KEY (user_uuid) REFERENCES sc_user (user_uuid),
            INDEX (role_id) USING HASH,
            FOREIGN KEY (role_id) REFERENCES sc_role (role_id)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;
    </entry>

    <entry key="org.seasr.central.storage.db.schema">
        //
        // sc_group
        //
        CREATE TABLE IF NOT EXISTS sc_group (
            group_uuid  DECIMAL(39) NOT NULL,
            name        VARCHAR(45) NOT NULL,
            created_at  DATETIME NOT NULL,
            profile     TEXT NOT NULL,
            deleted     BOOLEAN NOT NULL DEFAULT FALSE,

            PRIMARY KEY (group_uuid),
            UNIQUE INDEX (name ASC)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_user_group
        //
        CREATE TABLE IF NOT EXISTS sc_user_group (
            user_uuid   DECIMAL(39) NOT NULL,
            group_uuid  DECIMAL(39) NOT NULL,
            role_id     SMALLINT UNSIGNED NOT NULL,

            PRIMARY KEY (user_uuid, group_uuid),
            INDEX (user_uuid) USING HASH,
            FOREIGN KEY (user_uuid) REFERENCES sc_user (user_uuid),
            INDEX (group_uuid) USING HASH,
            FOREIGN KEY (group_uuid) REFERENCES sc_group (group_uuid),
            INDEX (role_id) USING HASH,
            FOREIGN KEY (role_id) REFERENCES sc_role (role_id)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_user_group_pending
        //
        CREATE  TABLE IF NOT EXISTS sc_user_group_pending (
            user_uuid     DECIMAL(39) NOT NULL,
            group_uuid    DECIMAL(39) NOT NULL,
            requested_at  DATETIME NOT NULL,

            PRIMARY KEY (user_uuid, group_uuid),
            INDEX (user_uuid) USING HASH,
            FOREIGN KEY (user_uuid) REFERENCES sc_user (user_uuid),
            INDEX (group_uuid) USING HASH,
            FOREIGN KEY (group_uuid) REFERENCES sc_group (group_uuid)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_rights
        //
        CREATE TABLE IF NOT EXISTS sc_rights (
            rights_hash  DECIMAL(39) NOT NULL,
            text         MEDIUMTEXT NOT NULL,

            PRIMARY KEY (rights_hash)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_component_core
        //
        CREATE TABLE IF NOT EXISTS sc_component_core (
            core_hash      DECIMAL(39) NOT NULL,
            firing_policy  VARCHAR(45) NOT NULL,
            mode           VARCHAR(255) NOT NULL,
            format         VARCHAR(45) NOT NULL,
            runnable       VARCHAR(45) NOT NULL,
            res_location   VARCHAR(255) NOT NULL,

            PRIMARY KEY (core_hash)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_component
        //
        CREATE TABLE IF NOT EXISTS sc_component (
            comp_uuid      DECIMAL(39) NOT NULL,
            uploaded_at    DATETIME NOT NULL,
            core_hash      DECIMAL(39) NOT NULL,
            name           VARCHAR(45) NULL,
            creator        VARCHAR(45) NULL,
            creation_date  DATETIME NULL,
            rights_hash    DECIMAL(39) NULL,
            uri            VARCHAR(255) NULL,
            deleted        BOOLEAN NOT NULL DEFAULT FALSE,

            PRIMARY KEY (comp_uuid, uploaded_at),
            INDEX (core_hash) USING HASH,
            FOREIGN KEY (core_hash) REFERENCES sc_component_core (core_hash),
            INDEX (rights_hash) USING HASH,
            FOREIGN KEY (rights_hash) REFERENCES sc_rights (rights_hash),
            INDEX (comp_uuid) USING HASH,
            INDEX (uri) USING HASH,
            INDEX (deleted) USING HASH
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_comp_description
        //
        CREATE TABLE IF NOT EXISTS sc_comp_description (
            comp_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,
            description  TEXT NULL,

            PRIMARY KEY (comp_uuid, uploaded_at),
            FOREIGN KEY (comp_uuid, uploaded_at) REFERENCES sc_component (comp_uuid, uploaded_at)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_comp_descriptor
        //
        CREATE TABLE IF NOT EXISTS sc_comp_descriptor (
            comp_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,
            descriptor   LONGTEXT NOT NULL,

            PRIMARY KEY (comp_uuid, uploaded_at),
            FOREIGN KEY (comp_uuid, uploaded_at) REFERENCES sc_component (comp_uuid, uploaded_at)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_comp_tag
        //
        CREATE TABLE IF NOT EXISTS sc_comp_tag (
            comp_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,
            tag          VARCHAR(45) NOT NULL,

            PRIMARY KEY (comp_uuid, uploaded_at, tag),
            INDEX (comp_uuid, uploaded_at) USING HASH,
            FOREIGN KEY (comp_uuid, uploaded_at) REFERENCES sc_component (comp_uuid, uploaded_at),
            INDEX (tag ASC)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_comp_category
        //
        CREATE TABLE IF NOT EXISTS sc_comp_category (
            cat_name     VARCHAR(45) NOT NULL,
            description  TEXT NOT NULL,

            PRIMARY KEY (cat_name)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_comp_cat_map
        //
        CREATE TABLE IF NOT EXISTS sc_comp_cat_map (
            comp_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,
            cat_name     VARCHAR(45) NOT NULL,

            PRIMARY KEY (comp_uuid, uploaded_at, cat_name),
            INDEX (comp_uuid, uploaded_at) USING HASH,
            FOREIGN KEY (comp_uuid, uploaded_at) REFERENCES sc_component (comp_uuid, uploaded_at),
            INDEX (cat_name) USING HASH,
            FOREIGN KEY (cat_name) REFERENCES sc_comp_category (cat_name)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_context
        //
        CREATE TABLE IF NOT EXISTS sc_context (
            context_hash  DECIMAL(39) NOT NULL,
            data          LONGBLOB NOT NULL,

            PRIMARY KEY (context_hash)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_component_context
        //
        CREATE TABLE IF NOT EXISTS sc_component_context (
            comp_uuid     DECIMAL(39) NOT NULL,
            uploaded_at   DATETIME NOT NULL,
            context_hash  DECIMAL(39) NOT NULL,
            mime_type     VARCHAR(45) NOT NULL,

            PRIMARY KEY (comp_uuid, uploaded_at, context_hash),
            INDEX (comp_uuid, uploaded_at) USING HASH,
            FOREIGN KEY (comp_uuid, uploaded_at) REFERENCES sc_component (comp_uuid, uploaded_at),
            INDEX (context_hash) USING HASH,
            FOREIGN KEY (context_hash) REFERENCES sc_context (context_hash)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_core_context
        //
        CREATE TABLE IF NOT EXISTS sc_core_context (
            core_hash     DECIMAL(39) NOT NULL,
            context_hash  DECIMAL(39) NOT NULL,

            PRIMARY KEY (core_hash, context_hash),
            INDEX (core_hash) USING HASH,
            FOREIGN KEY (core_hash) REFERENCES sc_component_core (core_hash),
            INDEX (context_hash) USING HASH,
            FOREIGN KEY (context_hash) REFERENCES sc_context (context_hash)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_user_component
        //
        CREATE TABLE IF NOT EXISTS sc_user_component (
            user_uuid    DECIMAL(39) NOT NULL,
            comp_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,

            PRIMARY KEY (user_uuid, comp_uuid, uploaded_at),
            INDEX (user_uuid) USING HASH,
            FOREIGN KEY (user_uuid) REFERENCES sc_user (user_uuid),
            INDEX (comp_uuid, uploaded_at) USING HASH,
            FOREIGN KEY (comp_uuid, uploaded_at) REFERENCES sc_component (comp_uuid, uploaded_at)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_component_group
        //
        CREATE TABLE IF NOT EXISTS sc_component_group (
            comp_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,
            group_uuid   DECIMAL(39) NOT NULL,

            PRIMARY KEY (comp_uuid, uploaded_at, group_uuid),
            INDEX (comp_uuid, uploaded_at) USING HASH,
            FOREIGN KEY (comp_uuid, uploaded_at) REFERENCES sc_component (comp_uuid, uploaded_at),
            INDEX (group_uuid) USING HASH,
            FOREIGN KEY (group_uuid) REFERENCES sc_group (group_uuid)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_flow
        //
        CREATE TABLE IF NOT EXISTS sc_flow (
            flow_uuid      DECIMAL(39) NOT NULL,
            uploaded_at    DATETIME NOT NULL,
            core_hash      DECIMAL(39) NOT NULL,
            name           VARCHAR(45) NULL,
            creator        VARCHAR(45) NULL,
            creation_date  DATETIME NULL,
            rights_hash    DECIMAL(39) NULL,
            uri            VARCHAR(255) NULL,
            deleted        BOOLEAN NOT NULL DEFAULT FALSE,

            PRIMARY KEY (flow_uuid, uploaded_at),
            INDEX (rights_hash) USING HASH,
            FOREIGN KEY (rights_hash) REFERENCES sc_rights (rights_hash),
            INDEX (flow_uuid) USING HASH,
            INDEX (core_hash) USING HASH,
            INDEX (uri) USING HASH,
            INDEX (deleted) USING HASH
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_flow_description
        //
        CREATE TABLE IF NOT EXISTS sc_flow_description (
            flow_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,
            description  TEXT NULL,

            PRIMARY KEY (flow_uuid, uploaded_at),
            FOREIGN KEY (flow_uuid, uploaded_at) REFERENCES sc_flow (flow_uuid, uploaded_at)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_flow_descriptor
        //
        CREATE TABLE IF NOT EXISTS sc_flow_descriptor (
            flow_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,
            descriptor   LONGTEXT NOT NULL,

            PRIMARY KEY (flow_uuid, uploaded_at),
            FOREIGN KEY (flow_uuid, uploaded_at) REFERENCES sc_flow (flow_uuid, uploaded_at)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_flow_tag
        //
        CREATE TABLE IF NOT EXISTS sc_flow_tag (
            flow_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,
            tag          VARCHAR(45) NOT NULL,

            PRIMARY KEY (flow_uuid, uploaded_at, tag),
            INDEX (flow_uuid, uploaded_at) USING HASH,
            FOREIGN KEY (flow_uuid, uploaded_at) REFERENCES sc_flow (flow_uuid, uploaded_at),
            INDEX (tag ASC)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_flow_category
        //
        CREATE TABLE IF NOT EXISTS sc_flow_category (
            cat_name     VARCHAR(45) NOT NULL,
            description  TEXT NOT NULL,

            PRIMARY KEY (cat_name)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_flow_cat_map
        //
        CREATE TABLE IF NOT EXISTS sc_flow_cat_map (
            flow_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,
            cat_name     VARCHAR(45) NOT NULL,

            PRIMARY KEY (flow_uuid, uploaded_at, cat_name),
            INDEX (flow_uuid, uploaded_at) USING HASH,
            FOREIGN KEY (flow_uuid, uploaded_at) REFERENCES sc_flow (flow_uuid, uploaded_at),
            INDEX (cat_name) USING HASH,
            FOREIGN KEY (cat_name) REFERENCES sc_flow_category (cat_name)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_flow_comp_core
        //
        CREATE TABLE IF NOT EXISTS sc_flow_comp_core (
            flow_core_hash    DECIMAL(39) NOT NULL,
            flow_uploaded_at  DATETIME NOT NULL,
            comp_core_hash    DECIMAL(39) NOT NULL,
            comp_uploaded_at  DATETIME NOT NULL,

            PRIMARY KEY (flow_core_hash, comp_core_hash, flow_uploaded_at, comp_uploaded_at),
            INDEX (flow_core_hash) USING HASH,
            FOREIGN KEY (flow_core_hash) REFERENCES sc_flow (core_hash),
            INDEX (comp_core_hash) USING HASH,
            FOREIGN KEY (comp_core_hash) REFERENCES sc_component_core (core_hash)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_user_flow
        //
        CREATE TABLE IF NOT EXISTS sc_user_flow (
            user_uuid    DECIMAL(39) NOT NULL,
            flow_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,

            PRIMARY KEY (user_uuid, flow_uuid, uploaded_at),
            INDEX (user_uuid) USING HASH,
            FOREIGN KEY (user_uuid) REFERENCES sc_user (user_uuid),
            INDEX (flow_uuid, uploaded_at) USING HASH,
            FOREIGN KEY (flow_uuid, uploaded_at) REFERENCES sc_flow (flow_uuid, uploaded_at)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_flow_group
        //
        CREATE TABLE IF NOT EXISTS sc_flow_group (
            flow_uuid    DECIMAL(39) NOT NULL,
            uploaded_at  DATETIME NOT NULL,
            group_uuid   DECIMAL(39) NOT NULL,

            PRIMARY KEY (flow_uuid, uploaded_at, group_uuid),
            INDEX (flow_uuid, uploaded_at) USING HASH,
            FOREIGN KEY (flow_uuid, uploaded_at) REFERENCES sc_flow (flow_uuid, uploaded_at),
            INDEX (group_uuid) USING HASH,
            FOREIGN KEY (group_uuid) REFERENCES sc_group (group_uuid)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_event_code
        //
        CREATE TABLE IF NOT EXISTS sc_event_code (
            evt_code     SMALLINT UNSIGNED NOT NULL,
            description  VARCHAR(45) NOT NULL,

            PRIMARY KEY (evt_code)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;

        //
        // sc_event
        //
        CREATE TABLE IF NOT EXISTS sc_event (
            timestamp   DATETIME NOT NULL,
            evt_code    SMALLINT UNSIGNED NOT NULL,
            user_uuid   DECIMAL(39) NULL,
            group_uuid  DECIMAL(39) NULL,
            comp_uuid   DECIMAL(39) NULL,
            flow_uuid   DECIMAL(39) NULL,
            metadata    TEXT NULL,

            INDEX (evt_code) USING HASH,
            FOREIGN KEY (evt_code) REFERENCES sc_event_code (evt_code),
            INDEX (user_uuid) USING HASH,
            FOREIGN KEY (user_uuid) REFERENCES sc_user (user_uuid),
            INDEX (group_uuid) USING HASH,
            FOREIGN KEY (group_uuid) REFERENCES sc_group (group_uuid),
            INDEX (comp_uuid) USING HASH,
            FOREIGN KEY (comp_uuid) REFERENCES sc_component (comp_uuid),
            INDEX (flow_uuid) USING HASH,
            FOREIGN KEY (flow_uuid) REFERENCES sc_flow (flow_uuid)
        ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;
    </entry>

    <!-- ROLE -->
    <entry key="org.seasr.central.storage.db.query.role.get.id">
        SELECT role_id FROM sc_role WHERE name = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.role.list">
        SELECT name AS role_name FROM sc_role LIMIT ?, ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.role.exists">
        SELECT 1 FROM sc_role WHERE name = ?;
    </entry>

    <!-- USER -->
    <entry key="org.seasr.central.storage.db.query.user.add">
        INSERT INTO sc_user (user_uuid, screen_name, password, created_at, profile) VALUES (?, ?, ?, NOW(), ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.remove">
        UPDATE sc_user SET deleted = 1 WHERE user_uuid = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.update.password">
        UPDATE sc_user SET password = ? WHERE user_uuid = ? AND deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.update.profile">
        UPDATE sc_user SET profile = ? WHERE user_uuid = ? AND deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.get.uuid">
        SELECT user_uuid FROM sc_user WHERE screen_name = ? AND deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.get.screen_name">
        SELECT screen_name FROM sc_user WHERE user_uuid = ? AND deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.get.profile">
        SELECT profile FROM sc_user WHERE user_uuid = ? AND deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.get.createdat">
        SELECT created_at FROM sc_user WHERE user_uuid = ? AND deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.password.valid">
        SELECT 1 FROM sc_user WHERE user_uuid = ? AND password = ? AND deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.get.deleted">
        SELECT deleted FROM sc_user WHERE user_uuid = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.count">
        SELECT COUNT(1) FROM sc_user WHERE deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.list">
        SELECT user_uuid, screen_name, profile FROM sc_user WHERE deleted = 0 LIMIT ?, ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.group.list">
        SELECT ug.group_uuid, r.name AS role_name FROM (SELECT group_uuid, role_id FROM sc_user_group WHERE user_uuid = ?) ug INNER JOIN sc_role r ON ug.role_id = r.role_id LIMIT ?, ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.component.add">
        INSERT INTO sc_user_component (user_uuid, comp_uuid, uploaded_at) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.component.list.all">
        <![CDATA[SELECT c.comp_uuid, c.uploaded_at, COUNT(c.uploaded_at) AS version FROM sc_user_component uc INNER JOIN (SELECT comp_uuid, uploaded_at FROM sc_user_component WHERE user_uuid = ?) c ON uc.comp_uuid = c.comp_uuid AND uc.uploaded_at <= c.uploaded_at GROUP BY c.comp_uuid, c.uploaded_at LIMIT ?, ?;]]>
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.component.list.latest">
        <![CDATA[SELECT c.comp_uuid, MAX(c.uploaded_at) AS uploaded_at, COUNT(c.uploaded_at) AS version FROM sc_user_component uc INNER JOIN (SELECT comp_uuid, MAX(uploaded_at) AS uploaded_at FROM sc_user_component WHERE user_uuid = ? GROUP BY comp_uuid) c ON uc.comp_uuid = c.comp_uuid AND uc.uploaded_at <= c.uploaded_at GROUP BY c.comp_uuid LIMIT ?, ?;]]>
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.component.sharing.list.all">
        <![CDATA[SELECT c.comp_uuid, c.uploaded_at, c.version, g.group_uuid FROM (SELECT user.comp_uuid, user.uploaded_at, COUNT(user.uploaded_at) AS version FROM sc_user_component uc INNER JOIN (SELECT comp_uuid, uploaded_at FROM sc_user_component WHERE user_uuid = ?) user ON uc.comp_uuid = user.comp_uuid AND uc.uploaded_at <= user.uploaded_at GROUP BY user.comp_uuid, user.uploaded_at) c LEFT JOIN sc_component_group g ON c.comp_uuid = g.comp_uuid AND c.uploaded_at = g.uploaded_at LIMIT ?, ?;]]>
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.component.sharing.list.all.as_user">
        <![CDATA[SELECT c.comp_uuid, c.uploaded_at, c.version, g.group_uuid FROM (SELECT user.comp_uuid, user.uploaded_at, COUNT(user.uploaded_at) AS version FROM sc_user_component uc INNER JOIN (SELECT comp_uuid, uploaded_at FROM sc_user_component WHERE user_uuid = ?) user ON uc.comp_uuid = user.comp_uuid AND uc.uploaded_at <= user.uploaded_at GROUP BY user.comp_uuid, user.uploaded_at) c LEFT JOIN sc_component_group g USING(comp_uuid,uploaded_at) WHERE g.group_uuid IN (SELECT group_uuid FROM sc_user_group WHERE user_uuid = ? UNION SELECT 0 AS group_uuid) UNION (SELECT user.comp_uuid, user.uploaded_at, COUNT(user.uploaded_at) AS version, NULL AS group_uuid FROM sc_user_component uc INNER JOIN (SELECT comp_uuid, uploaded_at FROM (SELECT comp_uuid, uploaded_at FROM sc_user_component WHERE user_uuid = ?) uc1 INNER JOIN (SELECT comp_uuid, uploaded_at FROM sc_user_component WHERE user_uuid = ?) uc2 USING (comp_uuid, uploaded_at)) user ON uc.comp_uuid = user.comp_uuid AND uc.uploaded_at <= user.uploaded_at GROUP BY user.comp_uuid, user.uploaded_at) LIMIT ?, ?;]]>
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.component.sharing.list.latest.as_user">
        <![CDATA[SELECT y.comp_uuid, y.uploaded_at, y.version, z.group_uuid FROM (SELECT x.comp_uuid, MAX(x.uploaded_at) AS uploaded_at, MAX(x.version) AS version FROM (SELECT c.comp_uuid, c.uploaded_at, c.version, g.group_uuid FROM (SELECT user.comp_uuid, user.uploaded_at, COUNT(user.uploaded_at) AS version FROM sc_user_component uc INNER JOIN (SELECT comp_uuid, uploaded_at FROM sc_user_component WHERE user_uuid = ?) user ON uc.comp_uuid = user.comp_uuid AND uc.uploaded_at <= user.uploaded_at GROUP BY user.comp_uuid, user.uploaded_at) c LEFT JOIN sc_component_group g USING(comp_uuid,uploaded_at) WHERE g.group_uuid IN (SELECT group_uuid FROM sc_user_group WHERE user_uuid = ? UNION SELECT 0 AS group_uuid) UNION (SELECT user.comp_uuid, user.uploaded_at, COUNT(user.uploaded_at) AS version, NULL AS group_uuid FROM sc_user_component uc INNER JOIN (SELECT comp_uuid, uploaded_at FROM (SELECT comp_uuid, uploaded_at FROM sc_user_component WHERE user_uuid = ?) uc1 INNER JOIN (SELECT comp_uuid, uploaded_at FROM sc_user_component WHERE user_uuid = ?) uc2 USING (comp_uuid, uploaded_at)) user ON uc.comp_uuid = user.comp_uuid AND uc.uploaded_at <= user.uploaded_at GROUP BY user.comp_uuid, user.uploaded_at)) x GROUP BY x.comp_uuid) y INNER JOIN (SELECT c.comp_uuid, c.uploaded_at, c.version, g.group_uuid FROM (SELECT user.comp_uuid, user.uploaded_at, COUNT(user.uploaded_at) AS version FROM sc_user_component uc INNER JOIN (SELECT comp_uuid, uploaded_at FROM sc_user_component WHERE user_uuid = ?) user ON uc.comp_uuid = user.comp_uuid AND uc.uploaded_at <= user.uploaded_at GROUP BY user.comp_uuid, user.uploaded_at) c LEFT JOIN sc_component_group g USING(comp_uuid,uploaded_at) WHERE g.group_uuid IN (SELECT group_uuid FROM sc_user_group WHERE user_uuid = ? UNION SELECT 0 AS group_uuid) UNION (SELECT user.comp_uuid, user.uploaded_at, COUNT(user.uploaded_at) AS version, NULL AS group_uuid FROM sc_user_component uc INNER JOIN (SELECT comp_uuid, uploaded_at FROM (SELECT comp_uuid, uploaded_at FROM sc_user_component WHERE user_uuid = ?) uc1 INNER JOIN (SELECT comp_uuid, uploaded_at FROM sc_user_component WHERE user_uuid = ?) uc2 USING (comp_uuid, uploaded_at)) user ON uc.comp_uuid = user.comp_uuid AND uc.uploaded_at <= user.uploaded_at GROUP BY user.comp_uuid, user.uploaded_at)) z USING (comp_uuid, uploaded_at) LIMIT ?, ?;]]>
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.flow.add">
        INSERT INTO sc_user_flow (user_uuid, flow_uuid, uploaded_at) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.user.flow.sharing.list.all">
        <![CDATA[SELECT f.flow_uuid, f.uploaded_at, f.version, g.group_uuid FROM (SELECT user.flow_uuid, user.uploaded_at, COUNT(user.uploaded_at) AS version FROM sc_user_flow uf INNER JOIN (SELECT flow_uuid, uploaded_at FROM sc_user_flow WHERE user_uuid = ?) user ON uf.flow_uuid = user.flow_uuid AND uf.uploaded_at <= user.uploaded_at GROUP BY user.flow_uuid, user.uploaded_at) f LEFT JOIN sc_flow_group g ON f.flow_uuid = g.flow_uuid AND f.uploaded_at = g.uploaded_at LIMIT ?, ?;]]>
    </entry>

    <!-- GROUP -->
    <entry key="org.seasr.central.storage.db.query.group.add">
        INSERT INTO sc_group (group_uuid, name, created_at, profile) VALUES (?, ?, NOW(), ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.group.get.uuid">
        SELECT group_uuid FROM sc_group WHERE name = ? AND deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.group.get.name">
        SELECT name FROM sc_group WHERE group_uuid = ? AND deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.group.get.profile">
        SELECT profile FROM sc_group WHERE group_uuid = ? AND deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.group.get.createdat">
        SELECT created_at FROM sc_group WHERE group_uuid = ? AND deleted = 0;
    </entry>
    <entry key="org.seasr.central.storage.db.query.group.pending.add">
        INSERT IGNORE INTO sc_user_group_pending (user_uuid, group_uuid, requested_at) VALUES (?, ?, NOW());
    </entry>
    <entry key="org.seasr.central.storage.db.query.group.pending.list">
        SELECT user_uuid, requested_at FROM sc_user_group_pending WHERE group_uuid = ? LIMIT ?, ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.group.members.add">
        INSERT IGNORE INTO sc_user_group (user_uuid, group_uuid, role_id) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.group.members.list">
        SELECT ug.user_uuid, r.name AS role_name FROM (SELECT user_uuid, role_id FROM sc_user_group WHERE group_uuid = ?) ug INNER JOIN sc_role r ON ug.role_id = r.role_id LIMIT ?, ?;
    </entry>

    <!-- EVENTS -->
    <entry key="org.seasr.central.storage.db.query.event.add">
        INSERT INTO sc_event (timestamp, evt_code, user_uuid, group_uuid, comp_uuid, flow_uuid, metadata) VALUES (NOW(), ?, ? ,?, ?, ?, ?);
    </entry>

    <!-- RIGHTS -->
    <entry key="org.seasr.central.storage.db.query.rights.add">
        INSERT INTO sc_rights (rights_hash, text) VALUES (?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.rights.get.text">
        SELECT text FROM sc_rights WHERE rights_hash = ?;
    </entry>

    <!-- COMPONENTS -->
    <entry key="org.seasr.central.storage.db.query.datetime.now">
        SELECT NOW();
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.add">
        INSERT INTO sc_component (comp_uuid, uploaded_at, core_hash, name, creator, creation_date, rights_hash, uri) VALUES (?, ?, ?, ?, ?, ?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.add.description">
        INSERT INTO sc_comp_description (comp_uuid, uploaded_at, description) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.add.tag">
        INSERT INTO sc_comp_tag (comp_uuid, uploaded_at, tag) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.core.context.add">
        INSERT INTO sc_core_context (core_hash, context_hash) VALUES (?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.context.add">
        INSERT INTO sc_component_context (comp_uuid, uploaded_at, context_hash, mime_type) VALUES (?, ?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.context.get">
        SELECT mime_type, data FROM (SELECT context_hash, mime_type FROM sc_component_context WHERE comp_uuid = ? AND uploaded_at = ? AND context_hash = ?) c INNER JOIN sc_context ctx ON c.context_hash = ctx.context_hash;
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.add.descriptor">
        INSERT INTO sc_comp_descriptor (comp_uuid, uploaded_at, descriptor) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.get.descriptor">
        SELECT descriptor FROM sc_comp_descriptor WHERE comp_uuid = ? AND uploaded_at = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.get.id">
        SELECT comp_uuid FROM sc_component WHERE uri = ? LIMIT 1;
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.get.core_hash">
        SELECT core_hash FROM sc_component WHERE comp_uuid = ? AND uploaded_at = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.get.last_insert">
        SELECT core_hash, name, creator, rights_hash, uri, description, tag FROM (SELECT comp_uuid, uploaded_at, core_hash, name, creator, rights_hash, uri FROM sc_component WHERE comp_uuid = ? ORDER BY uploaded_at DESC LIMIT 1) c INNER JOIN sc_comp_description d INNER JOIN sc_comp_tag t ON (c.comp_uuid = d.comp_uuid AND c.uploaded_at = d.uploaded_at) AND (c.comp_uuid = t.comp_uuid AND c.uploaded_at = t.uploaded_at);
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.get.ver_count">
        SELECT COUNT(1) FROM sc_component WHERE comp_uuid = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.share">
        INSERT IGNORE INTO sc_component_group (comp_uuid, uploaded_at, group_uuid) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.get.ver_id">
        SELECT uploaded_at FROM sc_component WHERE comp_uuid = ? ORDER BY uploaded_at ASC LIMIT 1 OFFSET ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.core.exists">
        SELECT 1 FROM sc_component_core WHERE core_hash = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.core.add">
        INSERT IGNORE INTO sc_component_core (core_hash, firing_policy, mode, format, runnable, res_location) VALUES (?, ?, ?, ?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.context.exists">
        SELECT 1 FROM sc_context WHERE context_hash = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.context.add">
        INSERT INTO sc_context (context_hash, data) VALUES (?, ?);
    </entry>

    <!-- FLOWS -->
    <entry key="org.seasr.central.storage.db.query.flow.add">
        INSERT INTO sc_flow (flow_uuid, uploaded_at, core_hash, name, creator, creation_date, rights_hash, uri) VALUES (?, ?, ?, ?, ?, ?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.add.description">
        INSERT INTO sc_flow_description (flow_uuid, uploaded_at, description) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.add.tag">
        INSERT INTO sc_flow_tag (flow_uuid, uploaded_at, tag) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.add.descriptor">
        INSERT INTO sc_flow_descriptor (flow_uuid, uploaded_at, descriptor) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.get.descriptor">
        SELECT descriptor FROM sc_flow_descriptor WHERE flow_uuid = ? AND uploaded_at = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.add.id">
        INSERT IGNORE INTO sc_flow_id_map (orig_uri, user_uuid, flow_uuid) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.get.id">
        SELECT flow_uuid FROM sc_flow WHERE uri = ? LIMIT 1;
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.get.last_insert">
        SELECT core_hash, name, creator, rights_hash, uri, description, tag FROM (SELECT flow_uuid, uploaded_at, core_hash, name, creator, rights_hash, uri FROM sc_flow WHERE flow_uuid = ? ORDER BY uploaded_at DESC LIMIT 1) f INNER JOIN sc_flow_description d INNER JOIN sc_flow_tag t ON (f.flow_uuid = d.flow_uuid AND f.uploaded_at = d.uploaded_at) AND (f.flow_uuid = t.flow_uuid AND f.uploaded_at = t.uploaded_at);
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.get.ver_count">
        SELECT COUNT(1) FROM sc_flow WHERE flow_uuid = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.get.ver_id">
        SELECT uploaded_at FROM sc_flow WHERE flow_uuid = ? ORDER BY uploaded_at ASC LIMIT 1 OFFSET ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.flow.component.add">
        INSERT INTO sc_flow_comp_core (flow_core_hash, flow_uploaded_at, comp_core_hash, comp_uploaded_at) VALUES (?, ?, ?, ?);
    </entry>
</properties>
