<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<comment>SEASR CENTRAL storage schema</comment>

	<entry key="org.seasr.central.storage.db.driver">org.sqlite.JDBC</entry>
	<entry key="org.seasr.central.storage.db.url">jdbc:sqlite:db/SCStore.sqlite</entry>
	<entry key="org.seasr.central.storage.db.user"></entry>
	<entry key="org.seasr.central.storage.db.password"></entry>
	<entry key="org.seasr.central.storage.db.db"></entry>

	<entry key="org.seasr.central.storage.link">org.seasr.central.storage.db.SQLiteLink</entry>

	<entry key="org.seasr.central.storage.db.auth.schema">
		CREATE TABLE IF NOT EXISTS sc_role (uuid CHAR(36) NOT NULL PRIMARY KEY, role VARCHAR(30) NOT NULL);
		CREATE TABLE IF NOT EXISTS sc_user (uuid CHAR(36) NOT NULL PRIMARY KEY, screen_name VARCHAR(20) NOT NULL UNIQUE, password VARCHAR(80) NOT NULL, created_at DATETIME NOT NULL, profile TEXT NOT NULL DEFAULT "{}", deleted BOOLEAN NOT NULL DEFAULT 0);
		CREATE TABLE IF NOT EXISTS sc_role_user (user_uuid CHAR(36) NOT NULL, role_uuid CHAR(36) NOT NULL, FOREIGN KEY (user_uuid) REFERENCES sc_user(uuid), FOREIGN KEY (role_uuid) REFERENCES sc_role(uuid));
		CREATE UNIQUE INDEX IF NOT EXISTS sc_user_screen_name ON sc_user(screen_name);
		CREATE INDEX IF NOT EXISTS sc_user_deleted ON sc_user(deleted);
		CREATE UNIQUE INDEX IF NOT EXISTS sc_user_role_uuids ON sc_role_user(user_uuid, role_uuid);

		INSERT OR IGNORE INTO sc_role (uuid, role) VALUES ("08b40562-138e-4ca9-86d7-561cfec1de0e", "user");
		INSERT OR IGNORE INTO sc_role (uuid, role) VALUES ("d7cb33b8-1225-498d-a463-5b78734f93f7", "admin");
		INSERT OR IGNORE INTO sc_user (uuid, screen_name, password, created_at) VALUES ("23e38ffa-fafc-4430-b88d-f04bd4d89104", "admin", "d033e22ae348aeb5660fc2140aec35850c4da997", DATETIME('NOW'));
		INSERT OR IGNORE INTO sc_role_user (user_uuid, role_uuid) VALUES ("d7cb33b8-1225-498d-a463-5b78734f93f7", "23e38ffa-fafc-4430-b88d-f04bd4d89104");
	</entry>

	<entry key="org.seasr.central.storage.db.schema">
        CREATE TABLE IF NOT EXISTS sc_event_codes (evt_code INT NOT NULL PRIMARY KEY, description VARCHAR(255) NOT NULL);
        CREATE TABLE IF NOT EXISTS sc_events (source CHAR(1) NOT NULL, uuid CHAR(36) NOT NULL, evt_code INT NOT NULL, description TEXT NOT NULL DEFAULT "{}", timestamp DATETIME NOT NULL, FOREIGN KEY (evt_code) REFERENCES sc_event_codes(evt_code));

        INSERT OR IGNORE INTO sc_event_codes (evt_code, description) VALUES (100, "USER_CREATED");
        INSERT OR IGNORE INTO sc_event_codes (evt_code, description) VALUES (101, "USER_DELETED");
        INSERT OR IGNORE INTO sc_event_codes (evt_code, description) VALUES (102, "USER_RENAMED");
        INSERT OR IGNORE INTO sc_event_codes (evt_code, description) VALUES (103, "USER_PROFILE_UPDATED");
        INSERT OR IGNORE INTO sc_event_codes (evt_code, description) VALUES (104, "USER_JOINED_GROUP");
        INSERT OR IGNORE INTO sc_event_codes (evt_code, description) VALUES (105, "USER_PARTED_GROUP");

        INSERT OR IGNORE INTO sc_event_codes (evt_code, description) VALUES (200, "GROUP_CREATED");
        INSERT OR IGNORE INTO sc_event_codes (evt_code, description) VALUES (201, "GROUP_DELETED");
        INSERT OR IGNORE INTO sc_event_codes (evt_code, description) VALUES (202, "GROUP_RENAMED");
        INSERT OR IGNORE INTO sc_event_codes (evt_code, description) VALUES (203, "GROUP_JOINED");
        INSERT OR IGNORE INTO sc_event_codes (evt_code, description) VALUES (204, "GROUP_PARTED");

        CREATE TABLE IF NOT EXISTS sc_component (uuid CHAR(36) NOT NULL, version INT NOT NULL, upload_date DATETIME NOT NULL, deleted BOOLEAN NOT NULL DEFAULT 0, PRIMARY KEY (uuid, version));
        CREATE TABLE IF NOT EXISTS sc_component_id_map (base_uri VARCHAR(255) NOT NULL, user_uuid CHAR(36) NOT NULL, comp_uuid CHAR(36) NOT NULL, PRIMARY KEY (base_uri, user_uuid), FOREIGN KEY (user_uuid) REFERENCES sc_user(uuid), FOREIGN KEY (comp_uuid) REFERENCES sc_component(uuid));
	</entry>

    <!-- USER -->
	<entry key="org.seasr.central.storage.db.query.user.count">
		SELECT COUNT(1) FROM sc_user WHERE deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.add">
		INSERT INTO sc_user (uuid, screen_name, password, created_at, profile) VALUES (?, ?, ?, DATETIME('NOW'), ?);
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.remove.uuid">
		UPDATE sc_user SET deleted = 1 WHERE uuid = ?;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.remove.screen_name">
		UPDATE sc_user SET deleted = 1 WHERE screen_name = ?;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.uuid">
		SELECT uuid FROM sc_user WHERE screen_name = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.screen_name">
		SELECT screen_name FROM sc_user WHERE uuid = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.profile.uuid">
		SELECT profile FROM sc_user WHERE uuid = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.profile.screen_name">
		SELECT profile FROM sc_user WHERE screen_name = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.createdat.uuid">
		SELECT created_at FROM sc_user WHERE uuid = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.get.createdat.screen_name">
		SELECT created_at FROM sc_user WHERE screen_name = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.valid.password.uuid">
		SELECT 1 FROM sc_user WHERE uuid = ? AND password = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.valid.password.screen_name">
		SELECT 1 FROM sc_user WHERE screen_name = ? AND password = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.update.profile.uuid">
		UPDATE sc_user SET profile = ? WHERE uuid = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.update.profile.screen_name">
		UPDATE sc_user SET profile = ? WHERE screen_name = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.update.password.uuid">
		UPDATE sc_user SET password = ? WHERE uuid = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.update.password.screen_name">
		UPDATE sc_user SET password = ? WHERE screen_name = ? AND deleted = 0;
	</entry>
	<entry key="org.seasr.central.storage.db.query.user.db.list">
		SELECT uuid, screen_name, profile FROM sc_user WHERE deleted = 0 LIMIT ?, ?;
	</entry>


    <!-- EVENTS -->
    <entry key="org.seasr.central.storage.db.query.event.add">
        INSERT INTO sc_events (source, uuid, evt_code, description, timestamp) VALUES (?, ?, ? ,?, DATETIME('NOW'));
    </entry>

    <!-- COMPONENTS -->
    <entry key="org.seasr.central.storage.db.query.component.add">
        INSERT INTO sc_component (uuid, version, upload_date) VALUES (?, ?, DATETIME('NOW'));
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.add.id">
        INSERT INTO sc_component_id_map (base_uri, user_uuid, comp_uuid) VALUES (?, ?, ?);
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.get.component.id.baseuri.user">
        SELECT comp_uuid FROM sc_component_id_map WHERE base_uri = ? AND user_uuid = ?;
    </entry>
    <entry key="org.seasr.central.storage.db.query.component.get.last.version.number">
        SELECT MAX(version) FROM sc_component WHERE uuid = ?;
    </entry>


</properties>